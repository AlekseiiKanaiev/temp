import React from 'react';
import styled from 'styled-components';
import InlineMessage from '@atlaskit/inline-message';

export default function IssueCardVulnerability({ issue }) {
  const ScoreWrapper = styled.span`
    font-family: 'Open Sans';
    font-weight: 700;
    font-style: normal;
    font-size: 13px;
    line-height: 24px;
    float: right;
  `;

  const AlignWrapper = styled.span`
    vertical-align: middle;
  `;

  const FontWrapper = styled.span`
    font-family: 'Open Sans';
    font-weight: 600;
    font-style: normal;
    font-size: 13px;
    line-height: 24px;
  `;

  const TextWrapper = styled.p`
    font-family: 'Open Sans';
    font-weight: 600;
    font-style: normal;
    font-size: 12px;
    line-height: 20px;
  `;

  const LiTextWrapper = styled.li`
    font-family: 'Open Sans';
    font-weight: 400;
    font-style: normal;
    font-size: 12px;
    line-height: 20px;
  `;

  const vulnerability = () => {
    const items = issue.issueData.identifiers;
    if (!items) {
      return [];
    }
    const order = ['ALTERNATIVE', 'CWE', 'CVE'];
    const links = order.flatMap((type) => {
      const item = Object.keys(items).find((item) => item === type);
      if (item) {
        return items[item].map((element) => {
          let link = '';
          if (item === 'ALTERNATIVE') {
            link = `https://snyk.io/vuln/${element}`;
          }
          if (item === 'CWE') {
            link = `https://cwe.mitre.org/data/definitions/${element.substring(
              element.lastIndexOf('-') + 1,
            )}`;
          }
          if (item === 'CVE') {
            link = `https://nvd.nist.gov/vuln/detail/${element}`;
          }
          if (link) {
            return (
              <a href={link} target="_blank" rel="noreferrer">
                {element}
              </a>
            );
          }
        });
      }
    });

    if (issue.issueData.url) {
      links.unshift(
        <a href={issue.issueData.url} target="_blank" rel="noreferrer">
          {issue.issueData.url.replace('https://snyk.io/vuln/', '')}
        </a>,
      );
    }
    const result = [];
    links.forEach((link) => {
      if (link) {
        result.push(' | ');
        result.push(link);
      }
    });
    return result;
  };

  return (
    <>
      <FontWrapper>
        VULNERABILITY
        {vulnerability().map((item) => item)}
      </FontWrapper>
      <ScoreWrapper>
        <AlignWrapper>{`SCORE ${issue.priority.score} `}</AlignWrapper>
        <AlignWrapper>
          <InlineMessage type="info" placement="top-end">
            <div>
              <TextWrapper>Why this priority score?</TextWrapper>
              <ul>
                {issue.priority.factors.map((factor) => (
                  <LiTextWrapper>{factor.description}</LiTextWrapper>
                ))}
              </ul>
            </div>
          </InlineMessage>
        </AlignWrapper>
      </ScoreWrapper>
    </>
  );
}
